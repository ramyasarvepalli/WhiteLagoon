> Create a model with properties (ex: Amenity)
> Add DbSet<T> property to DbContext
> Seed data to the database by overriding OnModelCreating method
> Add migration and update database

Partial views:
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}
<partial name="_Notification"/>

Repository pattern and UnitOfWork:
> Create a repository interface (ex: IAmenityRepository) and inherit from IRepository<T> interface (ex: IRepository<Amenity>)
> Create a repository class that implements the interface (ex: AmenityRepository)
> Add the repository to the Unit of work class
> Add a new controller with CRUD operations for the model
> Add the unit of work to the controller constructor and use it to access the repository methods 
> Create a new ViewModel for the model (ex: AmenityViewModel)
> Create Index, Create, Edit, Delete views for the model


> geticons.bootstrap - Bootstrap icons
> getbootstrap.com - Bootstrap (dropdown navbar)
> fontawesome.com - Font Awesome

> To include dependencies such as foreign keys, you can use the includeProperties.
VillaList = _unitOfWork.Villa.GetAll(includeProperties: "VillaAmenity")
[ValidateNever]
public IEnumerable<Amenity> VillaAmenity { get; set; }


> .NET Identity
> Open ApplicationDbContext and inherit from IdentityDbContext (instead of DbContext) by installing Microsoft.AspNetCore.Identity.EntityFrameworkCore
> Add the following service in Program.cs
builder.Services.AddIdentity<IdentityUser, IdentityRole>().AddEntityFrameworkStores<ApplicationDbContext>();
> AddEntityFrameworkStores<ApplicationDbContext>() is used to add Identity related tables to database using EFCore.
> Add this line to OnModelCreating() override method in ApplicationDbContext class.
base.OnModelCreating(modelBuilder);
This line is used to add Identity related keys to Identity tables using EFCore.
> Create a new class ApplicationUser that inherits from IdentityUser to add custom properties to the IdentityUser class.
> Specify the type of class to be added as ApplicationUser - public class ApplicationDbContext :IdentityDbContext<ApplicationUser>
> Add DbSet<ApplicationUser> property to ApplicationDbContext class. This is used to add custom properties to the IdentityUser class without creating new ApplicationUser table
as this is inherited from IdentityUser.
> Replace IdentityUser with ApplicationUser in AddIdentity<IdentityUser, IdentityRole>() method in Program.cs

> Inject IUnitOfWork in the controller constructor and use it to access the database, dbsets and repository methods.
> Inject UserManager to manage the user. UserManager is used to create, update, delete and find users.
> Inject SignInManager to sign in and sign out the user. That way we do not want to manage cookies and sessions manually. Directly we can use SignInManager 
helper methods.
> Inject RoleManager to manage roles. RoleManager is used to create, update, delete and find roles.

> Add the following service in Program.cs to use Identity in the application. This service is used to add Identity related services to the application.
builder.Services.AddIdentity<ApplicationUser, IdentityRole>()
    .AddEntityFrameworkStores<ApplicationDbContext>();

> Add roles to the database using RoleManager. If the role does not exist, create a new role. Without using DBContext or UnitOfWork, we can just use role manager helper methods
to create the roles.
if (!_roleManager.RoleExistsAsync("Admin").GetAwaiter().GetResult())
            {
                _roleManager.CreateAsync(new IdentityRole("Admin")).Wait();
                _roleManager.CreateAsync(new IdentityRole("Customer")).Wait();
            }

> Helper methods that are commonly used are: (AccountController)
SignInManager:
_signInManager.PasswordSignInAsync(loginVM.Email, loginVM.Password, loginVM.RememberMe, lockoutOnFailure: false) // to login the user
_signInManager.SignInAsync(user, isPersistent: false) // to sign in the user

RoleManager:
_roleManager.CreateAsync(new IdentityRole("Admin")).Wait() // to create a new role
_roleManager.RoleExistsAsync("Admin").GetAwaiter().GetResult() // to check if the role exists

UserManager:
_userManager.CreateAsync(user, registerVM.Password) // to create a new user
_userManager.AddToRoleAsync(user, registerVM.Role)  // to add role to user

>Check if the user is logged in:
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@if (SignInManager.IsSignedIn(User))
{
    <span class="text-white">@UserManager.GetUserName(User)</span>
}

Authorization with roles:
[Authorize(Roles = SD.Role_Admin)] on top of controller or action methods. This will allow only users with Admin role to access the controller or action methods.
[Authorize] - works only if the user is logged in.